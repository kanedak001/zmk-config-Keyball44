#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        pw: pw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(N) &kp T &kp T &kp D &kp A &kp T &kp A &kp N1 &kp EXCL>;
            label = "PW";
        };

        xa: xa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp X &kp A &kp N6 &kp N7 &kp E &kp J &kp Z &kp N2>;
            label = "XA";
        };
    };

    combos {
        compatible = "zmk,combos";

        MB3 {
            bindings = <&mkp MCLK>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp TAB         &kp Q     &kp W         &kp E         &kp R        &kp T                     &kp Y  &kp U  &kp I      &kp O    &kp P      &kp MINUS
&kp LCTRL       &kp A     &kp S         &kp D         &kp F        &kp G                     &kp H  &kp J  &kp K      &kp L    &kp SEMI   &kp SQT
&kp LEFT_SHIFT  &kp Z     &kp X         &kp C         &kp V        &kp B                     &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp ENTER
&kp LGUI        &kp LALT  &lt 3 ESCAPE  &kp LEFT_GUI  &lt 5 SPACE             &kp BACKSPACE  &mo 2                                        &lt 5 ESCAPE
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5              &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &none
&none   &kp LEFT      &kp DOWN      &kp UP_ARROW  &kp RIGHT     &none                     &none         &none         &none         &none         &none         &none
&none   &none         &none         &none         &none         &none                     &none         &none         &trans        &trans        &none         &none
&trans  &trans        &trans        &trans        &trans                          &trans  &trans                                                                &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&trans  &kp LS(LG(EXCLAMATION))  &kp LG(LS(N5))     &kp UP_ARROW     &kp PG_UP      &kp K_BACK                &kp K_BACK   &kp N7  &kp N8        &kp N9        &kp N0                &kp EQUAL
&trans  &kp HOME                 &kp LEFT_ARROW     &kp DOWN         &kp RIGHT      &kp END                   &kp DELETE   &kp N4  &kp N5        &kp NUMBER_6  &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&trans  &kp K_MUTE               &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PAGE_DOWN  &kp LS(LC(TAB))           &kp LC(TAB)  &kp N1  &kp NUMBER_2  &kp N3        &kp NON_US_BACKSLASH  &kp GRAVE
&trans  &trans                   &trans             &trans           &trans                              &pw  &trans                                                                 &xa
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none   &kp F1  &kp F2   &kp F3   &kp F4   &none              &none   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&none   &kp F5  &kp F6   &kp F7   &kp F8   &none              &none   &kp F4  &kp F5  &kp F6  &none    &kp F12
&none   &kp F9  &kp F10  &kp F11  &kp F12  &none              &none   &kp F1  &kp F2  &kp F3  &none    &none
&trans  &trans  &trans   &trans   &trans              &trans  &trans                                   &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &bt BT_SEL 0  &trans     &trans  &trans     &none      &trans
&trans  &trans  &trans  &trans  &trans  &trans              &bt BT_SEL 1  &mkp LCLK  &trans  &mkp RCLK  &mkp MCLK  &kp LG(TAB)
&trans  &trans  &trans  &trans  &trans  &trans              &bt BT_SEL 2  &trans     &trans  &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                                 &lt 5 ESCAPE
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sym-num {
            if-layers = <1 2>;
            then-layer = <1>;
        };
    };
};
